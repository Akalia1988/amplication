/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWisdomorgnizerArgs } from "./CreateWisdomorgnizerArgs";
import { UpdateWisdomorgnizerArgs } from "./UpdateWisdomorgnizerArgs";
import { DeleteWisdomorgnizerArgs } from "./DeleteWisdomorgnizerArgs";
import { WisdomorgnizerFindManyArgs } from "./WisdomorgnizerFindManyArgs";
import { WisdomorgnizerFindUniqueArgs } from "./WisdomorgnizerFindUniqueArgs";
import { Wisdomorgnizer } from "./Wisdomorgnizer";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { WisdomorgnizerService } from "../wisdomorgnizer.service";

@graphql.Resolver(() => Wisdomorgnizer)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class WisdomorgnizerResolverBase {
  constructor(
    protected readonly service: WisdomorgnizerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "read",
    possession: "any",
  })
  async _wisdomorgnizersMeta(
    @graphql.Args() args: WisdomorgnizerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Wisdomorgnizer])
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "read",
    possession: "any",
  })
  async wisdomorgnizers(
    @graphql.Args() args: WisdomorgnizerFindManyArgs
  ): Promise<Wisdomorgnizer[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Wisdomorgnizer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "read",
    possession: "own",
  })
  async wisdomorgnizer(
    @graphql.Args() args: WisdomorgnizerFindUniqueArgs
  ): Promise<Wisdomorgnizer | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wisdomorgnizer)
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "create",
    possession: "any",
  })
  async createWisdomorgnizer(
    @graphql.Args() args: CreateWisdomorgnizerArgs
  ): Promise<Wisdomorgnizer> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Wisdomorgnizer)
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "update",
    possession: "any",
  })
  async updateWisdomorgnizer(
    @graphql.Args() args: UpdateWisdomorgnizerArgs
  ): Promise<Wisdomorgnizer | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wisdomorgnizer)
  @nestAccessControl.UseRoles({
    resource: "Wisdomorgnizer",
    action: "delete",
    possession: "any",
  })
  async deleteWisdomorgnizer(
    @graphql.Args() args: DeleteWisdomorgnizerArgs
  ): Promise<Wisdomorgnizer | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Customer])
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async customers(
    @graphql.Parent() parent: Wisdomorgnizer,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
